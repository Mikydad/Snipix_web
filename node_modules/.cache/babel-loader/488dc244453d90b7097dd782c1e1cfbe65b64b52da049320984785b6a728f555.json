{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { apiService } from '../../services/apiService';\nconst initialState = {\n  projects: [],\n  currentProject: null,\n  isLoading: false,\n  error: null\n};\n\n// Async thunks\nexport const fetchProjects = createAsyncThunk('projects/fetchProjects', async () => {\n  const response = await apiService.get('/projects');\n  return response.data;\n});\nexport const createProject = createAsyncThunk('projects/createProject', async projectData => {\n  const response = await apiService.post('/projects', projectData);\n  return response.data;\n});\nexport const fetchProjectById = createAsyncThunk('projects/fetchProjectById', async projectId => {\n  const response = await apiService.get(`/projects/${projectId}`);\n  return response.data;\n});\nexport const updateProject = createAsyncThunk('projects/updateProject', async ({\n  projectId,\n  data\n}) => {\n  const response = await apiService.put(`/projects/${projectId}`, data);\n  return response.data;\n});\nexport const deleteProject = createAsyncThunk('projects/deleteProject', async projectId => {\n  await apiService.delete(`/projects/${projectId}`);\n  return projectId;\n});\nconst projectSlice = createSlice({\n  name: 'projects',\n  initialState,\n  reducers: {\n    setCurrentProject: (state, action) => {\n      state.currentProject = action.payload;\n    },\n    clearError: state => {\n      state.error = null;\n    },\n    updateProjectTimeline: (state, action) => {\n      var _state$currentProject;\n      const project = state.projects.find(p => p._id === action.payload.projectId);\n      if (project) {\n        project.timelineState = action.payload.timelineState;\n        project.updatedAt = new Date().toISOString();\n      }\n      if (((_state$currentProject = state.currentProject) === null || _state$currentProject === void 0 ? void 0 : _state$currentProject._id) === action.payload.projectId) {\n        state.currentProject.timelineState = action.payload.timelineState;\n        state.currentProject.updatedAt = new Date().toISOString();\n      }\n    },\n    updateProjectTranscript: (state, action) => {\n      var _state$currentProject2;\n      const project = state.projects.find(p => p._id === action.payload.projectId);\n      if (project) {\n        project.transcriptState = action.payload.transcriptState;\n        project.updatedAt = new Date().toISOString();\n      }\n      if (((_state$currentProject2 = state.currentProject) === null || _state$currentProject2 === void 0 ? void 0 : _state$currentProject2._id) === action.payload.projectId) {\n        state.currentProject.transcriptState = action.payload.transcriptState;\n        state.currentProject.updatedAt = new Date().toISOString();\n      }\n    }\n  },\n  extraReducers: builder => {\n    // Fetch projects\n    builder.addCase(fetchProjects.pending, state => {\n      state.isLoading = true;\n      state.error = null;\n    }).addCase(fetchProjects.fulfilled, (state, action) => {\n      var _action$payload;\n      state.isLoading = false;\n      state.projects = ((_action$payload = action.payload) === null || _action$payload === void 0 ? void 0 : _action$payload.data) || [];\n    }).addCase(fetchProjects.rejected, (state, action) => {\n      state.isLoading = false;\n      state.error = action.error.message || 'Failed to fetch projects';\n    });\n\n    // Create project\n    builder.addCase(createProject.pending, state => {\n      state.isLoading = true;\n      state.error = null;\n    }).addCase(createProject.fulfilled, (state, action) => {\n      var _action$payload2;\n      state.isLoading = false;\n      if ((_action$payload2 = action.payload) !== null && _action$payload2 !== void 0 && _action$payload2.data) {\n        state.projects.unshift(action.payload.data);\n        state.currentProject = action.payload.data;\n      }\n    }).addCase(createProject.rejected, (state, action) => {\n      state.isLoading = false;\n      state.error = action.error.message || 'Failed to create project';\n    });\n\n    // Fetch project by ID\n    builder.addCase(fetchProjectById.pending, state => {\n      state.isLoading = true;\n      state.error = null;\n    }).addCase(fetchProjectById.fulfilled, (state, action) => {\n      var _action$payload3;\n      state.isLoading = false;\n      state.currentProject = ((_action$payload3 = action.payload) === null || _action$payload3 === void 0 ? void 0 : _action$payload3.data) || null;\n    }).addCase(fetchProjectById.rejected, (state, action) => {\n      state.isLoading = false;\n      state.error = action.error.message || 'Failed to fetch project';\n    });\n\n    // Update project\n    builder.addCase(updateProject.pending, state => {\n      state.isLoading = true;\n      state.error = null;\n    }).addCase(updateProject.fulfilled, (state, action) => {\n      var _action$payload4;\n      state.isLoading = false;\n      if ((_action$payload4 = action.payload) !== null && _action$payload4 !== void 0 && _action$payload4.data) {\n        var _state$currentProject3;\n        const projectData = action.payload.data;\n        const index = state.projects.findIndex(p => p._id === projectData._id);\n        if (index !== -1) {\n          state.projects[index] = projectData;\n        }\n        if (((_state$currentProject3 = state.currentProject) === null || _state$currentProject3 === void 0 ? void 0 : _state$currentProject3._id) === projectData._id) {\n          state.currentProject = projectData;\n        }\n      }\n    }).addCase(updateProject.rejected, (state, action) => {\n      state.isLoading = false;\n      state.error = action.error.message || 'Failed to update project';\n    });\n\n    // Delete project\n    builder.addCase(deleteProject.pending, state => {\n      state.isLoading = true;\n      state.error = null;\n    }).addCase(deleteProject.fulfilled, (state, action) => {\n      var _state$currentProject4;\n      state.isLoading = false;\n      state.projects = state.projects.filter(p => p._id !== action.payload);\n      if (((_state$currentProject4 = state.currentProject) === null || _state$currentProject4 === void 0 ? void 0 : _state$currentProject4._id) === action.payload) {\n        state.currentProject = null;\n      }\n    }).addCase(deleteProject.rejected, (state, action) => {\n      state.isLoading = false;\n      state.error = action.error.message || 'Failed to delete project';\n    });\n  }\n});\nexport const {\n  setCurrentProject,\n  clearError,\n  updateProjectTimeline,\n  updateProjectTranscript\n} = projectSlice.actions;\nexport default projectSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","apiService","initialState","projects","currentProject","isLoading","error","fetchProjects","response","get","data","createProject","projectData","post","fetchProjectById","projectId","updateProject","put","deleteProject","delete","projectSlice","name","reducers","setCurrentProject","state","action","payload","clearError","updateProjectTimeline","_state$currentProject","project","find","p","_id","timelineState","updatedAt","Date","toISOString","updateProjectTranscript","_state$currentProject2","transcriptState","extraReducers","builder","addCase","pending","fulfilled","_action$payload","rejected","message","_action$payload2","unshift","_action$payload3","_action$payload4","_state$currentProject3","index","findIndex","_state$currentProject4","filter","actions","reducer"],"sources":["/Users/miko/Documents/Project/real_projects/Snipix_web/src/redux/slices/projectSlice.ts"],"sourcesContent":["import { createSlice, createAsyncThunk, PayloadAction } from '@reduxjs/toolkit';\nimport { Project, ApiResponse } from '../../types';\nimport { apiService } from '../../services/apiService';\n\ninterface ProjectState {\n  projects: Project[];\n  currentProject: Project | null;\n  isLoading: boolean;\n  error: string | null;\n}\n\nconst initialState: ProjectState = {\n  projects: [],\n  currentProject: null,\n  isLoading: false,\n  error: null,\n};\n\n// Async thunks\nexport const fetchProjects = createAsyncThunk(\n  'projects/fetchProjects',\n  async () => {\n    const response = await apiService.get<ApiResponse<Project[]>>('/projects');\n    return response.data;\n  }\n);\n\nexport const createProject = createAsyncThunk(\n  'projects/createProject',\n  async (projectData: Partial<Project>) => {\n    const response = await apiService.post<ApiResponse<Project>>('/projects', projectData);\n    return response.data;\n  }\n);\n\nexport const fetchProjectById = createAsyncThunk(\n  'projects/fetchProjectById',\n  async (projectId: string) => {\n    const response = await apiService.get<ApiResponse<Project>>(`/projects/${projectId}`);\n    return response.data;\n  }\n);\n\nexport const updateProject = createAsyncThunk(\n  'projects/updateProject',\n  async ({ projectId, data }: { projectId: string; data: Partial<Project> }) => {\n    const response = await apiService.put<ApiResponse<Project>>(`/projects/${projectId}`, data);\n    return response.data;\n  }\n);\n\nexport const deleteProject = createAsyncThunk(\n  'projects/deleteProject',\n  async (projectId: string) => {\n    await apiService.delete(`/projects/${projectId}`);\n    return projectId;\n  }\n);\n\nconst projectSlice = createSlice({\n  name: 'projects',\n  initialState,\n  reducers: {\n    setCurrentProject: (state, action: PayloadAction<Project | null>) => {\n      state.currentProject = action.payload;\n    },\n    clearError: (state) => {\n      state.error = null;\n    },\n    updateProjectTimeline: (state, action: PayloadAction<{ projectId: string; timelineState: any }>) => {\n      const project = state.projects.find(p => p._id === action.payload.projectId);\n      if (project) {\n        project.timelineState = action.payload.timelineState;\n        project.updatedAt = new Date().toISOString();\n      }\n      if (state.currentProject?._id === action.payload.projectId) {\n        state.currentProject.timelineState = action.payload.timelineState;\n        state.currentProject.updatedAt = new Date().toISOString();\n      }\n    },\n    updateProjectTranscript: (state, action: PayloadAction<{ projectId: string; transcriptState: any }>) => {\n      const project = state.projects.find(p => p._id === action.payload.projectId);\n      if (project) {\n        project.transcriptState = action.payload.transcriptState;\n        project.updatedAt = new Date().toISOString();\n      }\n      if (state.currentProject?._id === action.payload.projectId) {\n        state.currentProject.transcriptState = action.payload.transcriptState;\n        state.currentProject.updatedAt = new Date().toISOString();\n      }\n    },\n  },\n  extraReducers: (builder) => {\n    // Fetch projects\n    builder\n      .addCase(fetchProjects.pending, (state) => {\n        state.isLoading = true;\n        state.error = null;\n      })\n      .addCase(fetchProjects.fulfilled, (state, action) => {\n        state.isLoading = false;\n        state.projects = action.payload?.data || [];\n      })\n      .addCase(fetchProjects.rejected, (state, action) => {\n        state.isLoading = false;\n        state.error = action.error.message || 'Failed to fetch projects';\n      });\n\n    // Create project\n    builder\n      .addCase(createProject.pending, (state) => {\n        state.isLoading = true;\n        state.error = null;\n      })\n      .addCase(createProject.fulfilled, (state, action) => {\n        state.isLoading = false;\n        if (action.payload?.data) {\n          state.projects.unshift(action.payload.data);\n          state.currentProject = action.payload.data;\n        }\n      })\n      .addCase(createProject.rejected, (state, action) => {\n        state.isLoading = false;\n        state.error = action.error.message || 'Failed to create project';\n      });\n\n    // Fetch project by ID\n    builder\n      .addCase(fetchProjectById.pending, (state) => {\n        state.isLoading = true;\n        state.error = null;\n      })\n      .addCase(fetchProjectById.fulfilled, (state, action) => {\n        state.isLoading = false;\n        state.currentProject = action.payload?.data || null;\n      })\n      .addCase(fetchProjectById.rejected, (state, action) => {\n        state.isLoading = false;\n        state.error = action.error.message || 'Failed to fetch project';\n      });\n\n    // Update project\n    builder\n      .addCase(updateProject.pending, (state) => {\n        state.isLoading = true;\n        state.error = null;\n      })\n      .addCase(updateProject.fulfilled, (state, action) => {\n        state.isLoading = false;\n        if (action.payload?.data) {\n          const projectData = action.payload.data;\n          const index = state.projects.findIndex(p => p._id === projectData._id);\n          if (index !== -1) {\n            state.projects[index] = projectData;\n          }\n          if (state.currentProject?._id === projectData._id) {\n            state.currentProject = projectData;\n          }\n        }\n      })\n      .addCase(updateProject.rejected, (state, action) => {\n        state.isLoading = false;\n        state.error = action.error.message || 'Failed to update project';\n      });\n\n    // Delete project\n    builder\n      .addCase(deleteProject.pending, (state) => {\n        state.isLoading = true;\n        state.error = null;\n      })\n      .addCase(deleteProject.fulfilled, (state, action) => {\n        state.isLoading = false;\n        state.projects = state.projects.filter(p => p._id !== action.payload);\n        if (state.currentProject?._id === action.payload) {\n          state.currentProject = null;\n        }\n      })\n      .addCase(deleteProject.rejected, (state, action) => {\n        state.isLoading = false;\n        state.error = action.error.message || 'Failed to delete project';\n      });\n  },\n});\n\nexport const {\n  setCurrentProject,\n  clearError,\n  updateProjectTimeline,\n  updateProjectTranscript,\n} = projectSlice.actions;\n\nexport default projectSlice.reducer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}