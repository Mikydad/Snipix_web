{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { apiService } from '../../services/apiService';\nconst initialState = {\n  file: null,\n  progress: 0,\n  isUploading: false,\n  error: null\n};\n\n// Async thunks\nexport const uploadVideo = createAsyncThunk('upload/uploadVideo', async ({\n  file,\n  projectId\n}, {\n  rejectWithValue\n}) => {\n  try {\n    const formData = new FormData();\n    formData.append('file', file);\n    formData.append('project_id', projectId);\n    const response = await apiService.post('/media/upload', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      },\n      onUploadProgress: progressEvent => {\n        const progress = progressEvent.total ? Math.round(progressEvent.loaded * 100 / progressEvent.total) : 0;\n        // Note: In a real implementation, you'd dispatch a progress action here\n        console.log('Upload progress:', progress);\n      }\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response, _error$response$data;\n    return rejectWithValue(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || 'Upload failed');\n  }\n});\nconst uploadSlice = createSlice({\n  name: 'upload',\n  initialState,\n  reducers: {\n    setFile: (state, action) => {\n      state.file = action.payload;\n      state.error = null;\n    },\n    setProgress: (state, action) => {\n      state.progress = action.payload;\n    },\n    clearUpload: state => {\n      state.file = null;\n      state.progress = 0;\n      state.isUploading = false;\n      state.error = null;\n    },\n    setError: (state, action) => {\n      state.error = action.payload;\n      state.isUploading = false;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(uploadVideo.pending, state => {\n      state.isUploading = true;\n      state.error = null;\n      state.progress = 0;\n    }).addCase(uploadVideo.fulfilled, state => {\n      state.isUploading = false;\n      state.progress = 100;\n      state.error = null;\n    }).addCase(uploadVideo.rejected, (state, action) => {\n      state.isUploading = false;\n      state.error = action.payload || 'Upload failed';\n      state.progress = 0;\n    });\n  }\n});\nexport const {\n  setFile,\n  setProgress,\n  clearUpload,\n  setError\n} = uploadSlice.actions;\nexport default uploadSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","apiService","initialState","file","progress","isUploading","error","uploadVideo","projectId","rejectWithValue","formData","FormData","append","response","post","headers","onUploadProgress","progressEvent","total","Math","round","loaded","console","log","data","_error$response","_error$response$data","uploadSlice","name","reducers","setFile","state","action","payload","setProgress","clearUpload","setError","extraReducers","builder","addCase","pending","fulfilled","rejected","actions","reducer"],"sources":["/Users/miko/Documents/Project/real_projects/Snipix_web/src/redux/slices/uploadSlice.ts"],"sourcesContent":["import { createSlice, createAsyncThunk, PayloadAction } from '@reduxjs/toolkit';\nimport { UploadState, UploadResponse, ApiResponse } from '../../types';\nimport { apiService } from '../../services/apiService';\n\nconst initialState: UploadState = {\n  file: null,\n  progress: 0,\n  isUploading: false,\n  error: null,\n};\n\n// Async thunks\nexport const uploadVideo = createAsyncThunk(\n  'upload/uploadVideo',\n  async ({ file, projectId }: { file: File; projectId: string }, { rejectWithValue }) => {\n    try {\n      const formData = new FormData();\n      formData.append('file', file);\n      formData.append('project_id', projectId);\n\n      const response = await apiService.post<ApiResponse<UploadResponse>>('/media/upload', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n        },\n        onUploadProgress: (progressEvent: any) => {\n          const progress = progressEvent.total\n            ? Math.round((progressEvent.loaded * 100) / progressEvent.total)\n            : 0;\n          // Note: In a real implementation, you'd dispatch a progress action here\n          console.log('Upload progress:', progress);\n        },\n      });\n\n      return response.data;\n    } catch (error: any) {\n      return rejectWithValue(error.response?.data?.error || 'Upload failed');\n    }\n  }\n);\n\nconst uploadSlice = createSlice({\n  name: 'upload',\n  initialState,\n  reducers: {\n    setFile: (state, action: PayloadAction<File | null>) => {\n      state.file = action.payload;\n      state.error = null;\n    },\n    setProgress: (state, action: PayloadAction<number>) => {\n      state.progress = action.payload;\n    },\n    clearUpload: (state) => {\n      state.file = null;\n      state.progress = 0;\n      state.isUploading = false;\n      state.error = null;\n    },\n    setError: (state, action: PayloadAction<string>) => {\n      state.error = action.payload;\n      state.isUploading = false;\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(uploadVideo.pending, (state) => {\n        state.isUploading = true;\n        state.error = null;\n        state.progress = 0;\n      })\n      .addCase(uploadVideo.fulfilled, (state) => {\n        state.isUploading = false;\n        state.progress = 100;\n        state.error = null;\n      })\n      .addCase(uploadVideo.rejected, (state, action) => {\n        state.isUploading = false;\n        state.error = action.payload as string || 'Upload failed';\n        state.progress = 0;\n      });\n  },\n});\n\nexport const {\n  setFile,\n  setProgress,\n  clearUpload,\n  setError,\n} = uploadSlice.actions;\n\nexport default uploadSlice.reducer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}