{"ast":null,"code":"import { configureStore } from '@reduxjs/toolkit';\nimport { useDispatch, useSelector } from 'react-redux';\nimport projectReducer from './slices/projectSlice';\nimport uploadReducer from './slices/uploadSlice';\nimport transcriptReducer from './slices/transcriptSlice';\nimport timelineReducer from './slices/timelineSlice';\nimport authReducer from './slices/authSlice';\nexport const store = configureStore({\n  reducer: {\n    projects: projectReducer,\n    upload: uploadReducer,\n    transcript: transcriptReducer,\n    timeline: timelineReducer,\n    auth: authReducer\n  },\n  middleware: getDefaultMiddleware => getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: ['persist/PERSIST']\n    }\n  })\n});\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = useDispatch;\nexport const useAppSelector = useSelector;","map":{"version":3,"names":["configureStore","useDispatch","useSelector","projectReducer","uploadReducer","transcriptReducer","timelineReducer","authReducer","store","reducer","projects","upload","transcript","timeline","auth","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","useAppDispatch","useAppSelector"],"sources":["/Users/miko/Documents/Project/real_projects/Snipix_web/src/redux/store.ts"],"sourcesContent":["import { configureStore } from '@reduxjs/toolkit';\nimport { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\n\nimport projectReducer from './slices/projectSlice';\nimport uploadReducer from './slices/uploadSlice';\nimport transcriptReducer from './slices/transcriptSlice';\nimport timelineReducer from './slices/timelineSlice';\nimport authReducer from './slices/authSlice';\n\nexport const store = configureStore({\n  reducer: {\n    projects: projectReducer,\n    upload: uploadReducer,\n    transcript: transcriptReducer,\n    timeline: timelineReducer,\n    auth: authReducer,\n  },\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware({\n      serializableCheck: {\n        ignoredActions: ['persist/PERSIST'],\n      },\n    }),\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n\n"],"mappings":"AAAA,SAASA,cAAc,QAAQ,kBAAkB;AACjD,SAA+BC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AAE5E,OAAOC,cAAc,MAAM,uBAAuB;AAClD,OAAOC,aAAa,MAAM,sBAAsB;AAChD,OAAOC,iBAAiB,MAAM,0BAA0B;AACxD,OAAOC,eAAe,MAAM,wBAAwB;AACpD,OAAOC,WAAW,MAAM,oBAAoB;AAE5C,OAAO,MAAMC,KAAK,GAAGR,cAAc,CAAC;EAClCS,OAAO,EAAE;IACPC,QAAQ,EAAEP,cAAc;IACxBQ,MAAM,EAAEP,aAAa;IACrBQ,UAAU,EAAEP,iBAAiB;IAC7BQ,QAAQ,EAAEP,eAAe;IACzBQ,IAAI,EAAEP;EACR,CAAC;EACDQ,UAAU,EAAGC,oBAAoB,IAC/BA,oBAAoB,CAAC;IACnBC,iBAAiB,EAAE;MACjBC,cAAc,EAAE,CAAC,iBAAiB;IACpC;EACF,CAAC;AACL,CAAC,CAAC;AAKF;AACA,OAAO,MAAMC,cAAiC,GAAGlB,WAAW;AAC5D,OAAO,MAAMmB,cAA+C,GAAGlB,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}